{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CheggPy \ud83d\udc0d CheggPy is a Python package designed for interacting with the Chegg API, specifically tailored for Chegg Experts. It provides functionalities to login, fetch questions, analyze them based on keywords, and skip questions as needed. With CheggPy, you can automate tasks related to answering questions on Chegg's platform efficiently. Features \u2728 Login : Seamlessly login to Chegg using your credentials. Question Handling : Fetch the latest questions, analyze them based on specified keywords, and skip them if necessary. Automated Interaction : Automate the process of fetching and analyzing questions to streamline your workflow. Customizable : Adjust timeouts and keywords to match your preferences. Randomized Timeouts : Randomize timeouts to avoid detection and improve efficiency. Clear Interface : Easy-to-understand interface with banners and notifications for enhanced user experience. Documentation For detailed usage instructions, please refer to the documentation Installation \ud83d\ude80 You can install CheggPy via pip: pip install cheggpy Usage \ud83d\udee0\ufe0f Here's a simple example to get you started: cheggbot --username <your-username> --password <your-password> --keywords python java c++ Usage (For Developers) \ud83d\udee0\ufe0f Refer to the quickstart.py file for a quick start guide. Contributing \ud83e\udd1d Contributions are welcome! Please feel free to open issues or pull requests for any improvements or features you'd like to see. License \ud83d\udcdd This project is licensed under the MIT License - see the LICENSE file for details.","title":"Home"},{"location":"#features","text":"Login : Seamlessly login to Chegg using your credentials. Question Handling : Fetch the latest questions, analyze them based on specified keywords, and skip them if necessary. Automated Interaction : Automate the process of fetching and analyzing questions to streamline your workflow. Customizable : Adjust timeouts and keywords to match your preferences. Randomized Timeouts : Randomize timeouts to avoid detection and improve efficiency. Clear Interface : Easy-to-understand interface with banners and notifications for enhanced user experience.","title":"Features \u2728"},{"location":"#documentation","text":"For detailed usage instructions, please refer to the documentation","title":"Documentation"},{"location":"#installation","text":"You can install CheggPy via pip: pip install cheggpy","title":"Installation \ud83d\ude80"},{"location":"#usage","text":"Here's a simple example to get you started: cheggbot --username <your-username> --password <your-password> --keywords python java c++","title":"Usage \ud83d\udee0\ufe0f"},{"location":"#usage-for-developers","text":"Refer to the quickstart.py file for a quick start guide.","title":"Usage (For Developers) \ud83d\udee0\ufe0f"},{"location":"#contributing","text":"Contributions are welcome! Please feel free to open issues or pull requests for any improvements or features you'd like to see.","title":"Contributing \ud83e\udd1d"},{"location":"#license","text":"This project is licensed under the MIT License - see the LICENSE file for details.","title":"License \ud83d\udcdd"},{"location":"reference/cheggpy/","text":"Module cheggpy This module is the main module of the package and is used to interact with the Chegg API View Source \"\"\"This module is the main module of the package and is used to interact with the Chegg API\"\"\" from os import environ from requests import Session , RequestException from .util import welcome_banner , random_wait , play_success_notification , retry from .login_util import login_user from .logout_util import logout_user from .question_util import fetch_latest_question , skip_latest_question , analyze_question from .question import Question from .custom_exceptions import EmptyQueue __version__ = \"1.0.1\" class CheggPy : \"\"\" A class to interact with the Chegg API. Args: username (str): The username or email of the user. password (str): The password of the user. keywords (list): Keywords to search for in a chegg question to answer. short_timeout (tuple): A tuple of two integers representing the range of short timeouts.For example, (5, 10) means the timeout will be between 5 and 10 seconds. This is used for the time between subsequent API requests. long_timeout (tuple): A tuple of two integers representing the range of long timeouts. For example, (5*60, 10*60) means the timeout will be between 5 and 10 minutes. This is used to wait when there are no questions to answer. Returns: requests.Session: The session object after logging in. \"\"\" DASHBOARD_URL = \"https://expert.chegg.com/qna/authoring/answer\" def __init__ ( self , username = None , password = None , keywords = None , short_timeout = ( 5 , 10 ), long_timeout = ( 5 * 60 , 10 * 60 ) ): welcome_banner () self . username = username or environ . get ( 'CHEGG_USER' ) self . password = password or environ . get ( 'CHEGG_PW' ) self . keywords = keywords or [] self . session = Session () self . latest_question = Question () self . short_timeout = short_timeout self . long_timeout = long_timeout def login ( self ): \"\"\"Login the user with the provided username and password\"\"\" try : self . session = login_user ( self . username , self . password , self . session ) print ( 'Logged in successfully..........' ) random_wait ( * self . short_timeout ) except AssertionError as err : print ( str ( err )) raise except RequestException as err : print ( 'Login failed:' , err ) raise return self def logout ( self ): \"\"\"Logout the user\"\"\" try : logout_user ( self . session ) print ( 'Logged out successfully..........' ) except NotImplementedError as err : print ( str ( err )) @retry ( exceptions = EmptyQueue ) def fetch_question ( self ): \"\"\"Fetch the latest question with retry mechanism\"\"\" self . latest_question = Question ( fetch_latest_question ( self . session )) print ( 'Fetched the question successfully with id:' , self . latest_question . id ) random_wait ( * self . short_timeout ) return self def skip_question ( self ): \"\"\"Skip the latest question\"\"\" try : skip_latest_question ( self . session , self . latest_question ) print ( 'Skipped the question successfully with id:' , self . latest_question . id ) random_wait ( * self . short_timeout ) except NotImplementedError as err : print ( str ( err )) return self def is_question_answerable ( self ): \"\"\"Check if the latest question is answerable\"\"\" if analyze_question ( self . latest_question , self . keywords ): play_success_notification () return True return False Sub-modules cheggpy.custom_exceptions cheggpy.login_util cheggpy.logout_util cheggpy.question cheggpy.question_util cheggpy.util Classes CheggPy class CheggPy ( username = None , password = None , keywords = None , short_timeout = ( 5 , 10 ), long_timeout = ( 300 , 600 ) ) A class to interact with the Chegg API. Attributes Name Type Description Default username str The username or email of the user. None password str The password of the user. None keywords list Keywords to search for in a chegg question to answer. None short_timeout tuple A tuple of two integers representing the range of short timeouts.For example, (5, 10) means the timeout will be between 5 and 10 seconds. This is used for the time between subsequent API requests. None long_timeout tuple A tuple of two integers representing the range of long timeouts. For example, (5 60, 10 60) means the timeout will be between 5 and 10 minutes. This is used to wait when there are no questions to answer. None View Source class CheggPy : \"\"\" A class to interact with the Chegg API. Args: username (str): The username or email of the user. password (str): The password of the user. keywords (list): Keywords to search for in a chegg question to answer. short_timeout (tuple): A tuple of two integers representing the range of short timeouts.For example, (5, 10) means the timeout will be between 5 and 10 seconds. This is used for the time between subsequent API requests. long_timeout (tuple): A tuple of two integers representing the range of long timeouts. For example, (5*60, 10*60) means the timeout will be between 5 and 10 minutes. This is used to wait when there are no questions to answer. Returns: requests.Session: The session object after logging in. \"\"\" DASHBOARD_URL = \"https://expert.chegg.com/qna/authoring/answer\" def __init__ ( self , username = None , password = None , keywords = None , short_timeout = ( 5 , 10 ), long_timeout = ( 5 * 60 , 10 * 60 ) ) : welcome_banner () self . username = username or environ . get ( 'CHEGG_USER' ) self . password = password or environ . get ( 'CHEGG_PW' ) self . keywords = keywords or [] self . session = Session () self . latest_question = Question () self . short_timeout = short_timeout self . long_timeout = long_timeout def login ( self ) : \"\"\"Login the user with the provided username and password\"\"\" try : self . session = login_user ( self . username , self . password , self . session ) print ( 'Logged in successfully..........' ) random_wait ( * self . short_timeout ) except AssertionError as err : print ( str ( err )) raise except RequestException as err : print ( 'Login failed:' , err ) raise return self def logout ( self ) : \"\"\"Logout the user\"\"\" try : logout_user ( self . session ) print ( 'Logged out successfully..........' ) except NotImplementedError as err : print ( str ( err )) @retry ( exceptions = EmptyQueue ) def fetch_question ( self ) : \"\"\"Fetch the latest question with retry mechanism\"\"\" self . latest_question = Question ( fetch_latest_question ( self . session )) print ( 'Fetched the question successfully with id:' , self . latest_question . id ) random_wait ( * self . short_timeout ) return self def skip_question ( self ) : \"\"\"Skip the latest question\"\"\" try : skip_latest_question ( self . session , self . latest_question ) print ( 'Skipped the question successfully with id:' , self . latest_question . id ) random_wait ( * self . short_timeout ) except NotImplementedError as err : print ( str ( err )) return self def is_question_answerable ( self ) : \"\"\"Check if the latest question is answerable\"\"\" if analyze_question ( self . latest_question , self . keywords ) : play_success_notification () return True return False Class variables DASHBOARD_URL Methods fetch_question def fetch_question ( * args , ** kwargs ) View Source def wrapper(*args, **kwargs): retries = 0 while retries < max_retries or max_retries == -1: try: return func(*args, **kwargs) except exceptions as err: retries += 1 print(str(err), f\"Retrying {retries}..........\") if retries == max_retries: raise MaxRetryReached('Max retries reached. Failed to fetch the question.') from err random_long_wait() # This return statement is added to provide consistency return None # or raise another exception here if needed is_question_answerable def is_question_answerable ( self ) Check if the latest question is answerable View Source def is_question_answerable(self): \"\"\"Check if the latest question is answerable\"\"\" if analyze_question(self.latest_question, self.keywords): play_success_notification() return True return False login def login ( self ) Login the user with the provided username and password View Source def login(self): \"\"\"Login the user with the provided username and password\"\"\" try: self.session = login_user( self.username, self.password, self.session) print('Logged in successfully..........') random_wait(*self.short_timeout) except AssertionError as err: print(str(err)) raise except RequestException as err: print('Login failed:', err) raise return self logout def logout ( self ) Logout the user View Source def logout(self): \"\"\"Logout the user\"\"\" try: logout_user(self.session) print('Logged out successfully..........') except NotImplementedError as err: print(str(err)) skip_question def skip_question ( self ) Skip the latest question View Source def skip_question(self): \"\"\"Skip the latest question\"\"\" try: skip_latest_question(self.session, self.latest_question) print('Skipped the question successfully with id:', self.latest_question.id) random_wait(*self.short_timeout) except NotImplementedError as err: print(str(err)) return self","title":"Index"},{"location":"reference/cheggpy/#module-cheggpy","text":"This module is the main module of the package and is used to interact with the Chegg API View Source \"\"\"This module is the main module of the package and is used to interact with the Chegg API\"\"\" from os import environ from requests import Session , RequestException from .util import welcome_banner , random_wait , play_success_notification , retry from .login_util import login_user from .logout_util import logout_user from .question_util import fetch_latest_question , skip_latest_question , analyze_question from .question import Question from .custom_exceptions import EmptyQueue __version__ = \"1.0.1\" class CheggPy : \"\"\" A class to interact with the Chegg API. Args: username (str): The username or email of the user. password (str): The password of the user. keywords (list): Keywords to search for in a chegg question to answer. short_timeout (tuple): A tuple of two integers representing the range of short timeouts.For example, (5, 10) means the timeout will be between 5 and 10 seconds. This is used for the time between subsequent API requests. long_timeout (tuple): A tuple of two integers representing the range of long timeouts. For example, (5*60, 10*60) means the timeout will be between 5 and 10 minutes. This is used to wait when there are no questions to answer. Returns: requests.Session: The session object after logging in. \"\"\" DASHBOARD_URL = \"https://expert.chegg.com/qna/authoring/answer\" def __init__ ( self , username = None , password = None , keywords = None , short_timeout = ( 5 , 10 ), long_timeout = ( 5 * 60 , 10 * 60 ) ): welcome_banner () self . username = username or environ . get ( 'CHEGG_USER' ) self . password = password or environ . get ( 'CHEGG_PW' ) self . keywords = keywords or [] self . session = Session () self . latest_question = Question () self . short_timeout = short_timeout self . long_timeout = long_timeout def login ( self ): \"\"\"Login the user with the provided username and password\"\"\" try : self . session = login_user ( self . username , self . password , self . session ) print ( 'Logged in successfully..........' ) random_wait ( * self . short_timeout ) except AssertionError as err : print ( str ( err )) raise except RequestException as err : print ( 'Login failed:' , err ) raise return self def logout ( self ): \"\"\"Logout the user\"\"\" try : logout_user ( self . session ) print ( 'Logged out successfully..........' ) except NotImplementedError as err : print ( str ( err )) @retry ( exceptions = EmptyQueue ) def fetch_question ( self ): \"\"\"Fetch the latest question with retry mechanism\"\"\" self . latest_question = Question ( fetch_latest_question ( self . session )) print ( 'Fetched the question successfully with id:' , self . latest_question . id ) random_wait ( * self . short_timeout ) return self def skip_question ( self ): \"\"\"Skip the latest question\"\"\" try : skip_latest_question ( self . session , self . latest_question ) print ( 'Skipped the question successfully with id:' , self . latest_question . id ) random_wait ( * self . short_timeout ) except NotImplementedError as err : print ( str ( err )) return self def is_question_answerable ( self ): \"\"\"Check if the latest question is answerable\"\"\" if analyze_question ( self . latest_question , self . keywords ): play_success_notification () return True return False","title":"Module cheggpy"},{"location":"reference/cheggpy/#sub-modules","text":"cheggpy.custom_exceptions cheggpy.login_util cheggpy.logout_util cheggpy.question cheggpy.question_util cheggpy.util","title":"Sub-modules"},{"location":"reference/cheggpy/#classes","text":"","title":"Classes"},{"location":"reference/cheggpy/#cheggpy","text":"class CheggPy ( username = None , password = None , keywords = None , short_timeout = ( 5 , 10 ), long_timeout = ( 300 , 600 ) ) A class to interact with the Chegg API.","title":"CheggPy"},{"location":"reference/cheggpy/#attributes","text":"Name Type Description Default username str The username or email of the user. None password str The password of the user. None keywords list Keywords to search for in a chegg question to answer. None short_timeout tuple A tuple of two integers representing the range of short timeouts.For example, (5, 10) means the timeout will be between 5 and 10 seconds. This is used for the time between subsequent API requests. None long_timeout tuple A tuple of two integers representing the range of long timeouts. For example, (5 60, 10 60) means the timeout will be between 5 and 10 minutes. This is used to wait when there are no questions to answer. None View Source class CheggPy : \"\"\" A class to interact with the Chegg API. Args: username (str): The username or email of the user. password (str): The password of the user. keywords (list): Keywords to search for in a chegg question to answer. short_timeout (tuple): A tuple of two integers representing the range of short timeouts.For example, (5, 10) means the timeout will be between 5 and 10 seconds. This is used for the time between subsequent API requests. long_timeout (tuple): A tuple of two integers representing the range of long timeouts. For example, (5*60, 10*60) means the timeout will be between 5 and 10 minutes. This is used to wait when there are no questions to answer. Returns: requests.Session: The session object after logging in. \"\"\" DASHBOARD_URL = \"https://expert.chegg.com/qna/authoring/answer\" def __init__ ( self , username = None , password = None , keywords = None , short_timeout = ( 5 , 10 ), long_timeout = ( 5 * 60 , 10 * 60 ) ) : welcome_banner () self . username = username or environ . get ( 'CHEGG_USER' ) self . password = password or environ . get ( 'CHEGG_PW' ) self . keywords = keywords or [] self . session = Session () self . latest_question = Question () self . short_timeout = short_timeout self . long_timeout = long_timeout def login ( self ) : \"\"\"Login the user with the provided username and password\"\"\" try : self . session = login_user ( self . username , self . password , self . session ) print ( 'Logged in successfully..........' ) random_wait ( * self . short_timeout ) except AssertionError as err : print ( str ( err )) raise except RequestException as err : print ( 'Login failed:' , err ) raise return self def logout ( self ) : \"\"\"Logout the user\"\"\" try : logout_user ( self . session ) print ( 'Logged out successfully..........' ) except NotImplementedError as err : print ( str ( err )) @retry ( exceptions = EmptyQueue ) def fetch_question ( self ) : \"\"\"Fetch the latest question with retry mechanism\"\"\" self . latest_question = Question ( fetch_latest_question ( self . session )) print ( 'Fetched the question successfully with id:' , self . latest_question . id ) random_wait ( * self . short_timeout ) return self def skip_question ( self ) : \"\"\"Skip the latest question\"\"\" try : skip_latest_question ( self . session , self . latest_question ) print ( 'Skipped the question successfully with id:' , self . latest_question . id ) random_wait ( * self . short_timeout ) except NotImplementedError as err : print ( str ( err )) return self def is_question_answerable ( self ) : \"\"\"Check if the latest question is answerable\"\"\" if analyze_question ( self . latest_question , self . keywords ) : play_success_notification () return True return False","title":"Attributes"},{"location":"reference/cheggpy/#class-variables","text":"DASHBOARD_URL","title":"Class variables"},{"location":"reference/cheggpy/#methods","text":"","title":"Methods"},{"location":"reference/cheggpy/#fetch_question","text":"def fetch_question ( * args , ** kwargs ) View Source def wrapper(*args, **kwargs): retries = 0 while retries < max_retries or max_retries == -1: try: return func(*args, **kwargs) except exceptions as err: retries += 1 print(str(err), f\"Retrying {retries}..........\") if retries == max_retries: raise MaxRetryReached('Max retries reached. Failed to fetch the question.') from err random_long_wait() # This return statement is added to provide consistency return None # or raise another exception here if needed","title":"fetch_question"},{"location":"reference/cheggpy/#is_question_answerable","text":"def is_question_answerable ( self ) Check if the latest question is answerable View Source def is_question_answerable(self): \"\"\"Check if the latest question is answerable\"\"\" if analyze_question(self.latest_question, self.keywords): play_success_notification() return True return False","title":"is_question_answerable"},{"location":"reference/cheggpy/#login","text":"def login ( self ) Login the user with the provided username and password View Source def login(self): \"\"\"Login the user with the provided username and password\"\"\" try: self.session = login_user( self.username, self.password, self.session) print('Logged in successfully..........') random_wait(*self.short_timeout) except AssertionError as err: print(str(err)) raise except RequestException as err: print('Login failed:', err) raise return self","title":"login"},{"location":"reference/cheggpy/#logout","text":"def logout ( self ) Logout the user View Source def logout(self): \"\"\"Logout the user\"\"\" try: logout_user(self.session) print('Logged out successfully..........') except NotImplementedError as err: print(str(err))","title":"logout"},{"location":"reference/cheggpy/#skip_question","text":"def skip_question ( self ) Skip the latest question View Source def skip_question(self): \"\"\"Skip the latest question\"\"\" try: skip_latest_question(self.session, self.latest_question) print('Skipped the question successfully with id:', self.latest_question.id) random_wait(*self.short_timeout) except NotImplementedError as err: print(str(err)) return self","title":"skip_question"},{"location":"reference/cheggpy/custom_exceptions/","text":"Module cheggpy.custom_exceptions This module contains custom exception classes. View Source \"\"\" This module contains custom exception classes. \"\"\" # custom_exceptions.py class CustomError(Exception): \"\"\"Base class for custom exceptions.\"\"\" class EmptyQueue(CustomError): \"\"\"Raised when the question queue is empty.\"\"\" def __init__(self, message): \"\"\" Initialize an instance of EmptyQueue. Args: message (str): The error message associated with the exception. \"\"\" self.message = message super().__init__(self.message) class NoQuestionToSkip(CustomError): \"\"\"Raised when there is no question to skip.\"\"\" def __init__(self, message): \"\"\" Initialize an instance of NoQuestionToSkip. Args: message (str): The error message associated with the exception. \"\"\" self.message = message super().__init__(self.message) class MaxRetryReached(CustomError): \"\"\"Raised when the maximum number of retries is reached.\"\"\" def __init__(self, message): \"\"\" Initialize an instance of MaxRetryReached. Args: message (str): The error message associated with the exception. \"\"\" self.message = message super().__init__(self.message) Classes CustomError class CustomError ( / , * args , ** kwargs ) Base class for custom exceptions. View Source class CustomError ( Exception ): \"\"\"Base class for custom exceptions.\"\"\" Ancestors (in MRO) builtins.Exception builtins.BaseException Descendants cheggpy.custom_exceptions.EmptyQueue cheggpy.custom_exceptions.NoQuestionToSkip cheggpy.custom_exceptions.MaxRetryReached Class variables args Methods add_note def add_note ( ... ) Exception.add_note(note) -- add a note to the exception with_traceback def with_traceback ( ... ) Exception.with_traceback(tb) -- set self. traceback to tb and return self. EmptyQueue class EmptyQueue ( message ) Raised when the question queue is empty. View Source class EmptyQueue ( CustomError ): \"\"\"Raised when the question queue is empty.\"\"\" def __init__ ( self , message ): \"\"\" Initialize an instance of EmptyQueue. Args: message (str): The error message associated with the exception. \"\"\" self . message = message super (). __init__ ( self . message ) Ancestors (in MRO) cheggpy.custom_exceptions.CustomError builtins.Exception builtins.BaseException Class variables args Methods add_note def add_note ( ... ) Exception.add_note(note) -- add a note to the exception with_traceback def with_traceback ( ... ) Exception.with_traceback(tb) -- set self. traceback to tb and return self. MaxRetryReached class MaxRetryReached ( message ) Raised when the maximum number of retries is reached. View Source class MaxRetryReached ( CustomError ): \"\"\"Raised when the maximum number of retries is reached.\"\"\" def __init__ ( self , message ): \"\"\" Initialize an instance of MaxRetryReached. Args: message (str): The error message associated with the exception. \"\"\" self . message = message super (). __init__ ( self . message ) Ancestors (in MRO) cheggpy.custom_exceptions.CustomError builtins.Exception builtins.BaseException Class variables args Methods add_note def add_note ( ... ) Exception.add_note(note) -- add a note to the exception with_traceback def with_traceback ( ... ) Exception.with_traceback(tb) -- set self. traceback to tb and return self. NoQuestionToSkip class NoQuestionToSkip ( message ) Raised when there is no question to skip. View Source class NoQuestionToSkip ( CustomError ): \"\"\"Raised when there is no question to skip.\"\"\" def __init__ ( self , message ): \"\"\" Initialize an instance of NoQuestionToSkip. Args: message (str): The error message associated with the exception. \"\"\" self . message = message super (). __init__ ( self . message ) Ancestors (in MRO) cheggpy.custom_exceptions.CustomError builtins.Exception builtins.BaseException Class variables args Methods add_note def add_note ( ... ) Exception.add_note(note) -- add a note to the exception with_traceback def with_traceback ( ... ) Exception.with_traceback(tb) -- set self. traceback to tb and return self.","title":"Custom Exceptions"},{"location":"reference/cheggpy/custom_exceptions/#module-cheggpycustom_exceptions","text":"This module contains custom exception classes. View Source \"\"\" This module contains custom exception classes. \"\"\" # custom_exceptions.py class CustomError(Exception): \"\"\"Base class for custom exceptions.\"\"\" class EmptyQueue(CustomError): \"\"\"Raised when the question queue is empty.\"\"\" def __init__(self, message): \"\"\" Initialize an instance of EmptyQueue. Args: message (str): The error message associated with the exception. \"\"\" self.message = message super().__init__(self.message) class NoQuestionToSkip(CustomError): \"\"\"Raised when there is no question to skip.\"\"\" def __init__(self, message): \"\"\" Initialize an instance of NoQuestionToSkip. Args: message (str): The error message associated with the exception. \"\"\" self.message = message super().__init__(self.message) class MaxRetryReached(CustomError): \"\"\"Raised when the maximum number of retries is reached.\"\"\" def __init__(self, message): \"\"\" Initialize an instance of MaxRetryReached. Args: message (str): The error message associated with the exception. \"\"\" self.message = message super().__init__(self.message)","title":"Module cheggpy.custom_exceptions"},{"location":"reference/cheggpy/custom_exceptions/#classes","text":"","title":"Classes"},{"location":"reference/cheggpy/custom_exceptions/#customerror","text":"class CustomError ( / , * args , ** kwargs ) Base class for custom exceptions. View Source class CustomError ( Exception ): \"\"\"Base class for custom exceptions.\"\"\"","title":"CustomError"},{"location":"reference/cheggpy/custom_exceptions/#ancestors-in-mro","text":"builtins.Exception builtins.BaseException","title":"Ancestors (in MRO)"},{"location":"reference/cheggpy/custom_exceptions/#descendants","text":"cheggpy.custom_exceptions.EmptyQueue cheggpy.custom_exceptions.NoQuestionToSkip cheggpy.custom_exceptions.MaxRetryReached","title":"Descendants"},{"location":"reference/cheggpy/custom_exceptions/#class-variables","text":"args","title":"Class variables"},{"location":"reference/cheggpy/custom_exceptions/#methods","text":"","title":"Methods"},{"location":"reference/cheggpy/custom_exceptions/#add_note","text":"def add_note ( ... ) Exception.add_note(note) -- add a note to the exception","title":"add_note"},{"location":"reference/cheggpy/custom_exceptions/#with_traceback","text":"def with_traceback ( ... ) Exception.with_traceback(tb) -- set self. traceback to tb and return self.","title":"with_traceback"},{"location":"reference/cheggpy/custom_exceptions/#emptyqueue","text":"class EmptyQueue ( message ) Raised when the question queue is empty. View Source class EmptyQueue ( CustomError ): \"\"\"Raised when the question queue is empty.\"\"\" def __init__ ( self , message ): \"\"\" Initialize an instance of EmptyQueue. Args: message (str): The error message associated with the exception. \"\"\" self . message = message super (). __init__ ( self . message )","title":"EmptyQueue"},{"location":"reference/cheggpy/custom_exceptions/#ancestors-in-mro_1","text":"cheggpy.custom_exceptions.CustomError builtins.Exception builtins.BaseException","title":"Ancestors (in MRO)"},{"location":"reference/cheggpy/custom_exceptions/#class-variables_1","text":"args","title":"Class variables"},{"location":"reference/cheggpy/custom_exceptions/#methods_1","text":"","title":"Methods"},{"location":"reference/cheggpy/custom_exceptions/#add_note_1","text":"def add_note ( ... ) Exception.add_note(note) -- add a note to the exception","title":"add_note"},{"location":"reference/cheggpy/custom_exceptions/#with_traceback_1","text":"def with_traceback ( ... ) Exception.with_traceback(tb) -- set self. traceback to tb and return self.","title":"with_traceback"},{"location":"reference/cheggpy/custom_exceptions/#maxretryreached","text":"class MaxRetryReached ( message ) Raised when the maximum number of retries is reached. View Source class MaxRetryReached ( CustomError ): \"\"\"Raised when the maximum number of retries is reached.\"\"\" def __init__ ( self , message ): \"\"\" Initialize an instance of MaxRetryReached. Args: message (str): The error message associated with the exception. \"\"\" self . message = message super (). __init__ ( self . message )","title":"MaxRetryReached"},{"location":"reference/cheggpy/custom_exceptions/#ancestors-in-mro_2","text":"cheggpy.custom_exceptions.CustomError builtins.Exception builtins.BaseException","title":"Ancestors (in MRO)"},{"location":"reference/cheggpy/custom_exceptions/#class-variables_2","text":"args","title":"Class variables"},{"location":"reference/cheggpy/custom_exceptions/#methods_2","text":"","title":"Methods"},{"location":"reference/cheggpy/custom_exceptions/#add_note_2","text":"def add_note ( ... ) Exception.add_note(note) -- add a note to the exception","title":"add_note"},{"location":"reference/cheggpy/custom_exceptions/#with_traceback_2","text":"def with_traceback ( ... ) Exception.with_traceback(tb) -- set self. traceback to tb and return self.","title":"with_traceback"},{"location":"reference/cheggpy/custom_exceptions/#noquestiontoskip","text":"class NoQuestionToSkip ( message ) Raised when there is no question to skip. View Source class NoQuestionToSkip ( CustomError ): \"\"\"Raised when there is no question to skip.\"\"\" def __init__ ( self , message ): \"\"\" Initialize an instance of NoQuestionToSkip. Args: message (str): The error message associated with the exception. \"\"\" self . message = message super (). __init__ ( self . message )","title":"NoQuestionToSkip"},{"location":"reference/cheggpy/custom_exceptions/#ancestors-in-mro_3","text":"cheggpy.custom_exceptions.CustomError builtins.Exception builtins.BaseException","title":"Ancestors (in MRO)"},{"location":"reference/cheggpy/custom_exceptions/#class-variables_3","text":"args","title":"Class variables"},{"location":"reference/cheggpy/custom_exceptions/#methods_3","text":"","title":"Methods"},{"location":"reference/cheggpy/custom_exceptions/#add_note_3","text":"def add_note ( ... ) Exception.add_note(note) -- add a note to the exception","title":"add_note"},{"location":"reference/cheggpy/custom_exceptions/#with_traceback_3","text":"def with_traceback ( ... ) Exception.with_traceback(tb) -- set self. traceback to tb and return self.","title":"with_traceback"},{"location":"reference/cheggpy/login_util/","text":"Module cheggpy.login_util Module only used for the login part of the script View Source \"\"\"Module only used for the login part of the script\"\"\" import json def login_user ( username , password , session ): \"\"\" Logins the user with the given username and password. Args: username (str): The username or email of the user. password (str): The password of the user. session (requests.Session): The session object to use for the request. Returns: requests.Session: The session object after logging in. \"\"\" assert username , \"Username not provided\" assert password , \"Password not provided\" chegg_login_url = \"https://expert.chegg.com/api/auth/login\" payload = json . dumps ({ \"email\" : username , \"password\" : password }) headers = { 'User-Agent' : 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36' , 'Content-Type' : 'application/json' , 'Accept' : 'application/json, text/plain, */*' , 'sec-ch-ua-platform' : '\"macOS\"' , } response = session . post ( chegg_login_url , headers = headers , data = payload ) response . raise_for_status () # Raise exception for non-2xx status codes return session Functions login_user def login_user ( username , password , session ) Logins the user with the given username and password. Parameters: Name Type Description Default username str The username or email of the user. None password str The password of the user. None session requests.Session The session object to use for the request. None Returns: Type Description requests.Session The session object after logging in. View Source def login_user ( username , password , session ): \"\"\" Logins the user with the given username and password. Args: username (str): The username or email of the user. password (str): The password of the user. session (requests.Session): The session object to use for the request. Returns: requests.Session: The session object after logging in. \"\"\" assert username , \"Username not provided\" assert password , \"Password not provided\" chegg_login_url = \"https://expert.chegg.com/api/auth/login\" payload = json . dumps ({ \"email\" : username , \"password\" : password }) headers = { 'User-Agent' : 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36' , 'Content-Type' : 'application/json' , 'Accept' : 'application/json, text/plain, */*' , 'sec-ch-ua-platform' : '\"macOS\"' , } response = session . post ( chegg_login_url , headers = headers , data = payload ) response . raise_for_status () # Raise exception for non-2xx status codes return session","title":"Login Util"},{"location":"reference/cheggpy/login_util/#module-cheggpylogin_util","text":"Module only used for the login part of the script View Source \"\"\"Module only used for the login part of the script\"\"\" import json def login_user ( username , password , session ): \"\"\" Logins the user with the given username and password. Args: username (str): The username or email of the user. password (str): The password of the user. session (requests.Session): The session object to use for the request. Returns: requests.Session: The session object after logging in. \"\"\" assert username , \"Username not provided\" assert password , \"Password not provided\" chegg_login_url = \"https://expert.chegg.com/api/auth/login\" payload = json . dumps ({ \"email\" : username , \"password\" : password }) headers = { 'User-Agent' : 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36' , 'Content-Type' : 'application/json' , 'Accept' : 'application/json, text/plain, */*' , 'sec-ch-ua-platform' : '\"macOS\"' , } response = session . post ( chegg_login_url , headers = headers , data = payload ) response . raise_for_status () # Raise exception for non-2xx status codes return session","title":"Module cheggpy.login_util"},{"location":"reference/cheggpy/login_util/#functions","text":"","title":"Functions"},{"location":"reference/cheggpy/login_util/#login_user","text":"def login_user ( username , password , session ) Logins the user with the given username and password. Parameters: Name Type Description Default username str The username or email of the user. None password str The password of the user. None session requests.Session The session object to use for the request. None Returns: Type Description requests.Session The session object after logging in. View Source def login_user ( username , password , session ): \"\"\" Logins the user with the given username and password. Args: username (str): The username or email of the user. password (str): The password of the user. session (requests.Session): The session object to use for the request. Returns: requests.Session: The session object after logging in. \"\"\" assert username , \"Username not provided\" assert password , \"Password not provided\" chegg_login_url = \"https://expert.chegg.com/api/auth/login\" payload = json . dumps ({ \"email\" : username , \"password\" : password }) headers = { 'User-Agent' : 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36' , 'Content-Type' : 'application/json' , 'Accept' : 'application/json, text/plain, */*' , 'sec-ch-ua-platform' : '\"macOS\"' , } response = session . post ( chegg_login_url , headers = headers , data = payload ) response . raise_for_status () # Raise exception for non-2xx status codes return session","title":"login_user"},{"location":"reference/cheggpy/logout_util/","text":"Module cheggpy.logout_util Module only used for the logged out part of the script View Source \"\"\"Module only used for the logged out part of the script\"\"\" def logout_user(session): \"\"\"Logins the user with the given username and password\"\"\" chegg_logout_url = \"https://expert.chegg.com/api/auth/logout\" session.request(\"POST\", chegg_logout_url) session.close() Functions logout_user def logout_user ( session ) Logins the user with the given username and password View Source def logout_user(session): \"\"\"Logins the user with the given username and password\"\"\" chegg_logout_url = \"https://expert.chegg.com/api/auth/logout\" session.request(\"POST\", chegg_logout_url) session.close()","title":"Logout Util"},{"location":"reference/cheggpy/logout_util/#module-cheggpylogout_util","text":"Module only used for the logged out part of the script View Source \"\"\"Module only used for the logged out part of the script\"\"\" def logout_user(session): \"\"\"Logins the user with the given username and password\"\"\" chegg_logout_url = \"https://expert.chegg.com/api/auth/logout\" session.request(\"POST\", chegg_logout_url) session.close()","title":"Module cheggpy.logout_util"},{"location":"reference/cheggpy/logout_util/#functions","text":"","title":"Functions"},{"location":"reference/cheggpy/logout_util/#logout_user","text":"def logout_user ( session ) Logins the user with the given username and password View Source def logout_user(session): \"\"\"Logins the user with the given username and password\"\"\" chegg_logout_url = \"https://expert.chegg.com/api/auth/logout\" session.request(\"POST\", chegg_logout_url) session.close()","title":"logout_user"},{"location":"reference/cheggpy/question/","text":"Module cheggpy.question The module that handles a question and its properties of Chegg View Source \"\"\"The module that handles a question and its properties of Chegg\"\"\" from bs4 import BeautifulSoup class Question : \"\"\"Class to represent a question in Chegg\"\"\" def __init__ ( self , response = None ): response = response or {} question = response . get ( 'data' , {}) . get ( 'nextQuestionAnsweringAssignment' , {}) . get ( 'question' , {}) self . id = question . get ( 'id' ) self . uuid = question . get ( 'uuid' ) self . body = self . __sanitize_html ( question . get ( 'body' , \"\" ) or \"\" ) self . transcription = self . __sanitize_html ( question . get ( 'imageTranscriptionText' , \"\" ) or \"\" ) def __str__ ( self ): return f \"Body: { self . body } \\n Transcription: { self . transcription } \" def __sanitize_html ( self , html_data ): return BeautifulSoup ( html_data , 'html.parser' ) . get_text () Classes Question class Question ( response = None ) Class to represent a question in Chegg View Source class Question: \"\"\"Class to represent a question in Chegg\"\"\" def __init__ ( self , response = None ): response = response or {} question = response . get ( 'data' , {}). get ( 'nextQuestionAnsweringAssignment' , {}). get ( 'question' , {}) self . id = question . get ( 'id' ) self . uuid = question . get ( 'uuid' ) self . body = self . __sanitize_html ( question . get ( 'body' , \"\" ) or \"\" ) self . transcription = self . __sanitize_html ( question . get ( 'imageTranscriptionText' , \"\" ) or \"\" ) def __str__ ( self ): return f \"Body: {self.body}\\nTranscription: {self.transcription}\" def __sanitize_html ( self , html_data ): return BeautifulSoup ( html_data , 'html.parser' ). get_text ()","title":"Question"},{"location":"reference/cheggpy/question/#module-cheggpyquestion","text":"The module that handles a question and its properties of Chegg View Source \"\"\"The module that handles a question and its properties of Chegg\"\"\" from bs4 import BeautifulSoup class Question : \"\"\"Class to represent a question in Chegg\"\"\" def __init__ ( self , response = None ): response = response or {} question = response . get ( 'data' , {}) . get ( 'nextQuestionAnsweringAssignment' , {}) . get ( 'question' , {}) self . id = question . get ( 'id' ) self . uuid = question . get ( 'uuid' ) self . body = self . __sanitize_html ( question . get ( 'body' , \"\" ) or \"\" ) self . transcription = self . __sanitize_html ( question . get ( 'imageTranscriptionText' , \"\" ) or \"\" ) def __str__ ( self ): return f \"Body: { self . body } \\n Transcription: { self . transcription } \" def __sanitize_html ( self , html_data ): return BeautifulSoup ( html_data , 'html.parser' ) . get_text ()","title":"Module cheggpy.question"},{"location":"reference/cheggpy/question/#classes","text":"","title":"Classes"},{"location":"reference/cheggpy/question/#question","text":"class Question ( response = None ) Class to represent a question in Chegg View Source class Question: \"\"\"Class to represent a question in Chegg\"\"\" def __init__ ( self , response = None ): response = response or {} question = response . get ( 'data' , {}). get ( 'nextQuestionAnsweringAssignment' , {}). get ( 'question' , {}) self . id = question . get ( 'id' ) self . uuid = question . get ( 'uuid' ) self . body = self . __sanitize_html ( question . get ( 'body' , \"\" ) or \"\" ) self . transcription = self . __sanitize_html ( question . get ( 'imageTranscriptionText' , \"\" ) or \"\" ) def __str__ ( self ): return f \"Body: {self.body}\\nTranscription: {self.transcription}\" def __sanitize_html ( self , html_data ): return BeautifulSoup ( html_data , 'html.parser' ). get_text ()","title":"Question"},{"location":"reference/cheggpy/question_util/","text":"Module cheggpy.question_util This module contains utility functions for the question on chegg. View Source \"\"\"This module contains utility functions for the question on chegg.\"\"\" import json from .custom_exceptions import EmptyQueue , NoQuestionToSkip def fetch_latest_question ( session ): ''' Fetch the latest question in the queue. Returns dict with question_id, body, etc. if question is present. Otherwise, returns None or raises an Exception. ''' chegg_question_url = \"https://gateway.chegg.com/nestor-graph/graphql\" payload = json . dumps ({ \"operationName\" : \"NextQuestionAnsweringAssignment\" , \"variables\" : {}, \"query\" : \"query NextQuestionAnsweringAssignment { \\n nextQuestionAnsweringAssignment { \\n question { \\n body \\n id \\n uuid \\n subject { \\n id \\n name \\n subjectGroup { \\n id \\n name \\n __typename \\n } \\n __typename \\n } \\n imageTranscriptionText \\n lastAnswerUuid \\n __typename \\n } \\n langTranslation { \\n body \\n translationLanguage \\n __typename \\n } \\n questionGeoLocation { \\n countryCode \\n countryName \\n languages \\n __typename \\n } \\n questionRoutingDetails { \\n answeringStartTime \\n bonusCount \\n bonusTimeAllocationEnabled \\n checkAnswerStructureEnabled \\n hasAnsweringStarted \\n questionAssignTime \\n questionSolvingProbability \\n routingType \\n allocationExperimentId \\n questionQualityFactor \\n __typename \\n } \\n __typename \\n } \\n }\" }) headers = { 'authority' : 'gateway.chegg.com' , 'accept' : '*/*' , 'accept-language' : 'en-GB,en;q=0.9' , 'apollographql-client-name' : 'chegg-web-producers' , 'content-type' : 'application/json' , 'origin' : 'https://expert.chegg.com' , 'referer' : 'https://expert.chegg.com/' , 'sec-fetch-dest' : 'empty' , 'sec-fetch-mode' : 'cors' , 'sec-fetch-site' : 'same-site' , 'sec-gpc' : '1' , 'user-agent' : 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36' } session . headers . update ( headers ) response = json . loads ( session . request ( \"POST\" , chegg_question_url , data = payload ) . text ) if response . get ( 'errors' ) is not None : error = response [ 'errors' ][ 0 ] if error [ 'extensions' ][ 'errorType' ] == 'NO_QUESTION_ASSIGNED' : raise EmptyQueue ( 'No more question left in queue to answer.' ) raise NotImplementedError ( response [ 'errors' ][ 0 ][ 'message' ]) return response def skip_latest_question ( session , question ): \"\"\"Skip the latest question in the queue.\"\"\" if question is None or question . id is None : raise NoQuestionToSkip ( 'No question to skip.' ) chegg_question_url = \"https://gateway.chegg.com/nestor-graph/graphql\" payload = json . dumps ({ \"operationName\" : \"SkipQuestionAssignment\" , \"variables\" : { \"questionId\" : question . id , \"skipPageFlow\" : \"DECISION\" , \"skipPrimaryReason\" : { \"noKnowledge\" : True } }, \"query\" : \"mutation SkipQuestionAssignment($questionId: Long!, $skipPageFlow: QnaCurrentPageFlow!, $skipPrimaryReason: QuestionSkipPrimaryReasons, $newSkipReason: QuestionNewSkipReasons) { \\n skipQuestionAssignment( \\n questionId: $questionId \\n skipPageFlow: $skipPageFlow \\n skipPrimaryReason: $skipPrimaryReason \\n newSkipReason: $newSkipReason \\n ) { \\n message \\n questionId \\n __typename \\n } \\n }\" }) response = json . loads ( session . request ( \"POST\" , chegg_question_url , data = payload ) . text ) if response . get ( \"errors\" ) is not None : raise NotImplementedError ( response [ 'errors' ][ 0 ][ 'message' ]) def analyze_question ( question , keywords ): \"\"\"Analyze the question and return the result\"\"\" ques_text = question . body + ' ' + question . transcription if any ( word in ques_text for word in keywords ): return True return False Functions analyze_question def analyze_question ( question , keywords ) Analyze the question and return the result View Source def analyze_question(question, keywords): \"\"\"Analyze the question and return the result\"\"\" ques_text = question.body + ' ' + question.transcription if any(word in ques_text for word in keywords): return True return False fetch_latest_question def fetch_latest_question ( session ) Fetch the latest question in the queue. Returns dict with question_id, body, etc. if question is present. Otherwise, returns None or raises an Exception. View Source def fetch_latest_question ( session ): ''' Fetch the latest question in the queue. Returns dict with question_id, body, etc. if question is present. Otherwise, returns None or raises an Exception. ''' chegg_question_url = \"https://gateway.chegg.com/nestor-graph/graphql\" payload = json . dumps ({ \"operationName\" : \"NextQuestionAnsweringAssignment\" , \"variables\" : {}, \"query\" : \"query NextQuestionAnsweringAssignment { \\n nextQuestionAnsweringAssignment { \\n question { \\n body \\n id \\n uuid \\n subject { \\n id \\n name \\n subjectGroup { \\n id \\n name \\n __typename \\n } \\n __typename \\n } \\n imageTranscriptionText \\n lastAnswerUuid \\n __typename \\n } \\n langTranslation { \\n body \\n translationLanguage \\n __typename \\n } \\n questionGeoLocation { \\n countryCode \\n countryName \\n languages \\n __typename \\n } \\n questionRoutingDetails { \\n answeringStartTime \\n bonusCount \\n bonusTimeAllocationEnabled \\n checkAnswerStructureEnabled \\n hasAnsweringStarted \\n questionAssignTime \\n questionSolvingProbability \\n routingType \\n allocationExperimentId \\n questionQualityFactor \\n __typename \\n } \\n __typename \\n } \\n }\" }) headers = { 'authority' : 'gateway.chegg.com' , 'accept' : '*/*' , 'accept-language' : 'en-GB,en;q=0.9' , 'apollographql-client-name' : 'chegg-web-producers' , 'content-type' : 'application/json' , 'origin' : 'https://expert.chegg.com' , 'referer' : 'https://expert.chegg.com/' , 'sec-fetch-dest' : 'empty' , 'sec-fetch-mode' : 'cors' , 'sec-fetch-site' : 'same-site' , 'sec-gpc' : '1' , 'user-agent' : 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36' } session . headers . update ( headers ) response = json . loads ( session . request ( \"POST\" , chegg_question_url , data = payload ) . text ) if response . get ( 'errors' ) is not None : error = response [ 'errors' ][ 0 ] if error [ 'extensions' ][ 'errorType' ] == 'NO_QUESTION_ASSIGNED' : raise EmptyQueue ( 'No more question left in queue to answer.' ) raise NotImplementedError ( response [ 'errors' ][ 0 ][ 'message' ]) return response skip_latest_question def skip_latest_question ( session , question ) Skip the latest question in the queue. View Source def skip_latest_question ( session , question ): \"\"\"Skip the latest question in the queue.\"\"\" if question is None or question . id is None : raise NoQuestionToSkip ( 'No question to skip.' ) chegg_question_url = \"https://gateway.chegg.com/nestor-graph/graphql\" payload = json . dumps ({ \"operationName\" : \"SkipQuestionAssignment\" , \"variables\" : { \"questionId\" : question . id , \"skipPageFlow\" : \"DECISION\" , \"skipPrimaryReason\" : { \"noKnowledge\" : True } }, \"query\" : \"mutation SkipQuestionAssignment($questionId: Long!, $skipPageFlow: QnaCurrentPageFlow!, $skipPrimaryReason: QuestionSkipPrimaryReasons, $newSkipReason: QuestionNewSkipReasons) { \\n skipQuestionAssignment( \\n questionId: $questionId \\n skipPageFlow: $skipPageFlow \\n skipPrimaryReason: $skipPrimaryReason \\n newSkipReason: $newSkipReason \\n ) { \\n message \\n questionId \\n __typename \\n } \\n }\" }) response = json . loads ( session . request ( \"POST\" , chegg_question_url , data = payload ) . text ) if response . get ( \"errors\" ) is not None : raise NotImplementedError ( response [ 'errors' ][ 0 ][ 'message' ])","title":"Question Util"},{"location":"reference/cheggpy/question_util/#module-cheggpyquestion_util","text":"This module contains utility functions for the question on chegg. View Source \"\"\"This module contains utility functions for the question on chegg.\"\"\" import json from .custom_exceptions import EmptyQueue , NoQuestionToSkip def fetch_latest_question ( session ): ''' Fetch the latest question in the queue. Returns dict with question_id, body, etc. if question is present. Otherwise, returns None or raises an Exception. ''' chegg_question_url = \"https://gateway.chegg.com/nestor-graph/graphql\" payload = json . dumps ({ \"operationName\" : \"NextQuestionAnsweringAssignment\" , \"variables\" : {}, \"query\" : \"query NextQuestionAnsweringAssignment { \\n nextQuestionAnsweringAssignment { \\n question { \\n body \\n id \\n uuid \\n subject { \\n id \\n name \\n subjectGroup { \\n id \\n name \\n __typename \\n } \\n __typename \\n } \\n imageTranscriptionText \\n lastAnswerUuid \\n __typename \\n } \\n langTranslation { \\n body \\n translationLanguage \\n __typename \\n } \\n questionGeoLocation { \\n countryCode \\n countryName \\n languages \\n __typename \\n } \\n questionRoutingDetails { \\n answeringStartTime \\n bonusCount \\n bonusTimeAllocationEnabled \\n checkAnswerStructureEnabled \\n hasAnsweringStarted \\n questionAssignTime \\n questionSolvingProbability \\n routingType \\n allocationExperimentId \\n questionQualityFactor \\n __typename \\n } \\n __typename \\n } \\n }\" }) headers = { 'authority' : 'gateway.chegg.com' , 'accept' : '*/*' , 'accept-language' : 'en-GB,en;q=0.9' , 'apollographql-client-name' : 'chegg-web-producers' , 'content-type' : 'application/json' , 'origin' : 'https://expert.chegg.com' , 'referer' : 'https://expert.chegg.com/' , 'sec-fetch-dest' : 'empty' , 'sec-fetch-mode' : 'cors' , 'sec-fetch-site' : 'same-site' , 'sec-gpc' : '1' , 'user-agent' : 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36' } session . headers . update ( headers ) response = json . loads ( session . request ( \"POST\" , chegg_question_url , data = payload ) . text ) if response . get ( 'errors' ) is not None : error = response [ 'errors' ][ 0 ] if error [ 'extensions' ][ 'errorType' ] == 'NO_QUESTION_ASSIGNED' : raise EmptyQueue ( 'No more question left in queue to answer.' ) raise NotImplementedError ( response [ 'errors' ][ 0 ][ 'message' ]) return response def skip_latest_question ( session , question ): \"\"\"Skip the latest question in the queue.\"\"\" if question is None or question . id is None : raise NoQuestionToSkip ( 'No question to skip.' ) chegg_question_url = \"https://gateway.chegg.com/nestor-graph/graphql\" payload = json . dumps ({ \"operationName\" : \"SkipQuestionAssignment\" , \"variables\" : { \"questionId\" : question . id , \"skipPageFlow\" : \"DECISION\" , \"skipPrimaryReason\" : { \"noKnowledge\" : True } }, \"query\" : \"mutation SkipQuestionAssignment($questionId: Long!, $skipPageFlow: QnaCurrentPageFlow!, $skipPrimaryReason: QuestionSkipPrimaryReasons, $newSkipReason: QuestionNewSkipReasons) { \\n skipQuestionAssignment( \\n questionId: $questionId \\n skipPageFlow: $skipPageFlow \\n skipPrimaryReason: $skipPrimaryReason \\n newSkipReason: $newSkipReason \\n ) { \\n message \\n questionId \\n __typename \\n } \\n }\" }) response = json . loads ( session . request ( \"POST\" , chegg_question_url , data = payload ) . text ) if response . get ( \"errors\" ) is not None : raise NotImplementedError ( response [ 'errors' ][ 0 ][ 'message' ]) def analyze_question ( question , keywords ): \"\"\"Analyze the question and return the result\"\"\" ques_text = question . body + ' ' + question . transcription if any ( word in ques_text for word in keywords ): return True return False","title":"Module cheggpy.question_util"},{"location":"reference/cheggpy/question_util/#functions","text":"","title":"Functions"},{"location":"reference/cheggpy/question_util/#analyze_question","text":"def analyze_question ( question , keywords ) Analyze the question and return the result View Source def analyze_question(question, keywords): \"\"\"Analyze the question and return the result\"\"\" ques_text = question.body + ' ' + question.transcription if any(word in ques_text for word in keywords): return True return False","title":"analyze_question"},{"location":"reference/cheggpy/question_util/#fetch_latest_question","text":"def fetch_latest_question ( session ) Fetch the latest question in the queue. Returns dict with question_id, body, etc. if question is present. Otherwise, returns None or raises an Exception. View Source def fetch_latest_question ( session ): ''' Fetch the latest question in the queue. Returns dict with question_id, body, etc. if question is present. Otherwise, returns None or raises an Exception. ''' chegg_question_url = \"https://gateway.chegg.com/nestor-graph/graphql\" payload = json . dumps ({ \"operationName\" : \"NextQuestionAnsweringAssignment\" , \"variables\" : {}, \"query\" : \"query NextQuestionAnsweringAssignment { \\n nextQuestionAnsweringAssignment { \\n question { \\n body \\n id \\n uuid \\n subject { \\n id \\n name \\n subjectGroup { \\n id \\n name \\n __typename \\n } \\n __typename \\n } \\n imageTranscriptionText \\n lastAnswerUuid \\n __typename \\n } \\n langTranslation { \\n body \\n translationLanguage \\n __typename \\n } \\n questionGeoLocation { \\n countryCode \\n countryName \\n languages \\n __typename \\n } \\n questionRoutingDetails { \\n answeringStartTime \\n bonusCount \\n bonusTimeAllocationEnabled \\n checkAnswerStructureEnabled \\n hasAnsweringStarted \\n questionAssignTime \\n questionSolvingProbability \\n routingType \\n allocationExperimentId \\n questionQualityFactor \\n __typename \\n } \\n __typename \\n } \\n }\" }) headers = { 'authority' : 'gateway.chegg.com' , 'accept' : '*/*' , 'accept-language' : 'en-GB,en;q=0.9' , 'apollographql-client-name' : 'chegg-web-producers' , 'content-type' : 'application/json' , 'origin' : 'https://expert.chegg.com' , 'referer' : 'https://expert.chegg.com/' , 'sec-fetch-dest' : 'empty' , 'sec-fetch-mode' : 'cors' , 'sec-fetch-site' : 'same-site' , 'sec-gpc' : '1' , 'user-agent' : 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36' } session . headers . update ( headers ) response = json . loads ( session . request ( \"POST\" , chegg_question_url , data = payload ) . text ) if response . get ( 'errors' ) is not None : error = response [ 'errors' ][ 0 ] if error [ 'extensions' ][ 'errorType' ] == 'NO_QUESTION_ASSIGNED' : raise EmptyQueue ( 'No more question left in queue to answer.' ) raise NotImplementedError ( response [ 'errors' ][ 0 ][ 'message' ]) return response","title":"fetch_latest_question"},{"location":"reference/cheggpy/question_util/#skip_latest_question","text":"def skip_latest_question ( session , question ) Skip the latest question in the queue. View Source def skip_latest_question ( session , question ): \"\"\"Skip the latest question in the queue.\"\"\" if question is None or question . id is None : raise NoQuestionToSkip ( 'No question to skip.' ) chegg_question_url = \"https://gateway.chegg.com/nestor-graph/graphql\" payload = json . dumps ({ \"operationName\" : \"SkipQuestionAssignment\" , \"variables\" : { \"questionId\" : question . id , \"skipPageFlow\" : \"DECISION\" , \"skipPrimaryReason\" : { \"noKnowledge\" : True } }, \"query\" : \"mutation SkipQuestionAssignment($questionId: Long!, $skipPageFlow: QnaCurrentPageFlow!, $skipPrimaryReason: QuestionSkipPrimaryReasons, $newSkipReason: QuestionNewSkipReasons) { \\n skipQuestionAssignment( \\n questionId: $questionId \\n skipPageFlow: $skipPageFlow \\n skipPrimaryReason: $skipPrimaryReason \\n newSkipReason: $newSkipReason \\n ) { \\n message \\n questionId \\n __typename \\n } \\n }\" }) response = json . loads ( session . request ( \"POST\" , chegg_question_url , data = payload ) . text ) if response . get ( \"errors\" ) is not None : raise NotImplementedError ( response [ 'errors' ][ 0 ][ 'message' ])","title":"skip_latest_question"},{"location":"reference/cheggpy/util/","text":"Module cheggpy.util This module contains all the utility functions used in the main module. View Source \"\"\"This module contains all the utility functions used in the main module.\"\"\" from os import system , path from time import sleep from random import randint from colorama import Fore from tqdm import trange from .custom_exceptions import MaxRetryReached def welcome_banner (): \"\"\" Display a welcome banner. \"\"\" clear_screen () print ( Fore . RED + \"\"\" \u2584\u2588\u2588\u2588\u2588\u2584 \u2588\u2588\u2591 \u2588\u2588 \u2593\u2588\u2588\u2588\u2588\u2588 \u2584\u2588\u2588\u2588\u2588 \u2584\u2588\u2588\u2588\u2588 \u2584\u2584\u2584 \u2588 \u2588\u2588 \u2584\u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2593 \u2592\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2584 \u2584\u2588\u2588\u2588\u2593 \u2584\u2584\u2584 \u2584\u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2593 \u2588\u2588\u2593 \u2592\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2584 \u2588 \u2592\u2588\u2588\u2580 \u2580\u2588 \u2593\u2588\u2588\u2591 \u2588\u2588\u2592\u2593\u2588 \u2580 \u2588\u2588\u2592 \u2580\u2588\u2592 \u2588\u2588\u2592 \u2580\u2588\u2592 \u2592\u2588\u2588\u2588\u2588\u2584 \u2588\u2588 \u2593\u2588\u2588\u2592\u2593 \u2588\u2588\u2592 \u2593\u2592\u2592\u2588\u2588\u2592 \u2588\u2588\u2592\u2593\u2588\u2588\u2592\u2580\u2588\u2580 \u2588\u2588\u2592\u2592\u2588\u2588\u2588\u2588\u2584 \u2593 \u2588\u2588\u2592 \u2593\u2592\u2593\u2588\u2588\u2592\u2592\u2588\u2588\u2592 \u2588\u2588\u2592 \u2588\u2588 \u2580\u2588 \u2588 \u2592\u2593\u2588 \u2584 \u2592\u2588\u2588\u2580\u2580\u2588\u2588\u2591\u2592\u2588\u2588\u2588 \u2592\u2588\u2588\u2591\u2584\u2584\u2584\u2591\u2592\u2588\u2588\u2591\u2584\u2584\u2584\u2591 \u2592\u2588\u2588 \u2580\u2588\u2584 \u2593\u2588\u2588 \u2592\u2588\u2588\u2591\u2592 \u2593\u2588\u2588\u2591 \u2592\u2591\u2592\u2588\u2588\u2591 \u2588\u2588\u2592\u2593\u2588\u2588 \u2593\u2588\u2588\u2591\u2592\u2588\u2588 \u2580\u2588\u2584 \u2592 \u2593\u2588\u2588\u2591 \u2592\u2591\u2592\u2588\u2588\u2592\u2592\u2588\u2588\u2591 \u2588\u2588\u2592\u2593\u2588\u2588 \u2580\u2588 \u2588\u2588\u2592 \u2592\u2593\u2593\u2584 \u2584\u2588\u2588\u2592\u2591\u2593\u2588 \u2591\u2588\u2588 \u2592\u2593\u2588 \u2584 \u2591\u2593\u2588 \u2588\u2588\u2593\u2591\u2593\u2588 \u2588\u2588\u2593 \u2591\u2588\u2588\u2584\u2584\u2584\u2584\u2588\u2588 \u2593\u2593\u2588 \u2591\u2588\u2588\u2591\u2591 \u2593\u2588\u2588\u2593 \u2591 \u2592\u2588\u2588 \u2588\u2588\u2591\u2592\u2588\u2588 \u2592\u2588\u2588 \u2591\u2588\u2588\u2584\u2584\u2584\u2584\u2588\u2588 \u2591 \u2593\u2588\u2588\u2593 \u2591 \u2591\u2588\u2588\u2591\u2592\u2588\u2588 \u2588\u2588\u2591\u2593\u2588\u2588\u2592 \u2590\u258c\u2588\u2588\u2592 \u2592 \u2593\u2588\u2588\u2588\u2580 \u2591\u2591\u2593\u2588\u2592\u2591\u2588\u2588\u2593\u2591\u2592\u2588\u2588\u2588\u2588\u2592\u2591\u2592\u2593\u2588\u2588\u2588\u2580\u2592\u2591\u2592\u2593\u2588\u2588\u2588\u2580\u2592 \u2593\u2588 \u2593\u2588\u2588\u2592\u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2593 \u2592\u2588\u2588\u2592 \u2591 \u2591 \u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2592\u2588\u2588\u2592 \u2591\u2588\u2588\u2592 \u2593\u2588 \u2593\u2588\u2588\u2592 \u2592\u2588\u2588\u2592 \u2591 \u2591\u2588\u2588\u2591\u2591 \u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2592\u2588\u2588\u2591 \u2593\u2588\u2588\u2591 \u2591 \u2591\u2592 \u2592 \u2591 \u2592 \u2591\u2592\u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2592 \u2592\u2592 \u2591\u2591\u2591\u2592\u2591 \u2591 \u2591 \u2591 \u2591 \u2592 \u2592\u2591 \u2591 \u2591 \u2591 \u2592 \u2592\u2592 \u2591 \u2591 \u2592 \u2591\u2591 \u2591 \u2591 \u2592 \u2591 \u2591 \u2591 \u2591 \u2592 \u2592 \u2591\u2592\u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2592 \u2591\u2591\u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2592 \u2591 \u2591 \u2591 \u2592 \u2591 \u2592 \u2591\u2591 \u2591 \u2591 \u2592 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591\u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 Made with \u2764\ufe0f\ufe0f by \"\"\" + Fore . GREEN + \" \\033 ]8;;https://github.com/Harry-kp \\a Harry-kp \\033 ]8;; \\a\\n \" ) def goodbye_banner (): \"\"\" Display a goodbye banner. \"\"\" print ( Fore . RED + \"\"\" | <----------[Klark in the Zodiac]----------> | \"\"\" ) print ( \"Found any bugs. Raise it here -> https://github.com/Harry-kp/cheggpy/issues\" ) def clear_screen (): \"\"\" Clear the screen. \"\"\" system ( 'clear' ) def random_long_wait ( min_time = 5 , max_time = 10 ): ''' Sleep the execution of scripts for x minutes where x is random value b/w [min_time,max_time] ''' tym = randint ( min_time , max_time ) * 60 for _ in trange ( tym , desc = 'Sleeping \ud83d\ude34' ): sleep ( 1 ) def random_wait ( min_time = 5 , max_time = 10 ) -> None : \"\"\" Wait for a random amount of time. \"\"\" tym = randint ( min_time , max_time ) for _ in trange ( tym , desc = 'Sleeping \ud83d\ude34' ): sleep ( 1 ) def play_success_notification (): \"\"\" Whenver an answerable question is found. Play the success notification sound. \"\"\" mp3_path = path . join ( path . dirname ( __file__ ), 'assets' , 'notify.mp3' ) system ( f \"afplay { mp3_path } \" ) def retry ( max_retries =- 1 , exceptions = None ): \"\"\" Decorator that retries a function call a specified number of times if it raises specific exceptions. Args: max_retries (int, optional): The maximum number of retries. Set to -1 for unlimited retries. Defaults to -1. exceptions (Exception or tuple of Exception, optional): The exception(s) to catch and retry. Defaults to None. Returns: The decorated function. Raises: MaxRetryReached: If the maximum number of retries is reached and the function still raises an exception. \"\"\" def decorator ( func ): def wrapper ( * args , ** kwargs ): retries = 0 while retries < max_retries or max_retries == - 1 : try : return func ( * args , ** kwargs ) except exceptions as err : retries += 1 print ( str ( err ), f \"Retrying { retries } ..........\" ) if retries == max_retries : raise MaxRetryReached ( 'Max retries reached. Failed to fetch the question.' ) from err random_long_wait () # This return statement is added to provide consistency return None # or raise another exception here if needed return wrapper return decorator Functions clear_screen def clear_screen ( ) Clear the screen. View Source def clear_screen(): \"\"\" Clear the screen. \"\"\" system('clear') goodbye_banner def goodbye_banner ( ) Display a goodbye banner. View Source def goodbye_banner () : \"\"\" Display a goodbye banner. \"\"\" print ( Fore . RED + \"\"\" | <----------[Klark in the Zodiac]----------> | \"\"\" ) print ( \"Found any bugs. Raise it here -> https://github.com/Harry-kp/cheggpy/issues\" ) play_success_notification def play_success_notification ( ) Whenver an answerable question is found. Play the success notification sound. View Source def play_success_notification(): \"\"\" Whenver an answerable question is found. Play the success notification sound. \"\"\" mp3_path = path.join(path.dirname(__file__), 'assets', 'notify.mp3') system(f\"afplay {mp3_path}\") random_long_wait def random_long_wait ( min_time = 5 , max_time = 10 ) Sleep the execution of scripts for x minutes where x is random value b/w [min_time,max_time] View Source def random_long_wait(min_time=5, max_time=10): ''' Sleep the execution of scripts for x minutes where x is random value b/w [min_time,max_time] ''' tym = randint(min_time, max_time) * 60 for _ in trange(tym, desc='Sleeping \ud83d\ude34'): sleep(1) random_wait def random_wait ( min_time = 5 , max_time = 10 ) -> None Wait for a random amount of time. View Source def random_wait ( min_time = 5 , max_time = 10 ) -> None : \"\"\" Wait for a random amount of time. \"\"\" tym = randint ( min_time , max_time ) for _ in trange ( tym , desc = 'Sleeping \ud83d\ude34' ) : sleep ( 1 ) retry def retry ( max_retries =- 1 , exceptions = None ) Decorator that retries a function call a specified number of times if it raises specific exceptions. Parameters: Name Type Description Default max_retries int The maximum number of retries. Set to -1 for unlimited retries. Defaults to -1. -1 exceptions Exception or tuple of Exception The exception(s) to catch and retry. Defaults to None. None Returns: Type Description None The decorated function. Raises: Type Description MaxRetryReached If the maximum number of retries is reached and the function still raises an exception. View Source def retry(max_retries=-1, exceptions=None): \"\"\" Decorator that retries a function call a specified number of times if it raises specific exceptions. Args: max_retries (int, optional): The maximum number of retries. Set to -1 for unlimited retries. Defaults to -1. exceptions (Exception or tuple of Exception, optional): The exception(s) to catch and retry. Defaults to None. Returns: The decorated function. Raises: MaxRetryReached: If the maximum number of retries is reached and the function still raises an exception. \"\"\" def decorator(func): def wrapper(*args, **kwargs): retries = 0 while retries < max_retries or max_retries == -1: try: return func(*args, **kwargs) except exceptions as err: retries += 1 print(str(err), f\"Retrying {retries}..........\") if retries == max_retries: raise MaxRetryReached('Max retries reached. Failed to fetch the question.') from err random_long_wait() # This return statement is added to provide consistency return None # or raise another exception here if needed return wrapper return decorator welcome_banner def welcome_banner ( ) Display a welcome banner. View Source def welcome_banner (): \"\"\" Display a welcome banner. \"\"\" clear_screen () print ( Fore . RED + \"\"\" \u2584\u2588\u2588\u2588\u2588\u2584 \u2588\u2588\u2591 \u2588\u2588 \u2593\u2588\u2588\u2588\u2588\u2588 \u2584\u2588\u2588\u2588\u2588 \u2584\u2588\u2588\u2588\u2588 \u2584\u2584\u2584 \u2588 \u2588\u2588 \u2584\u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2593 \u2592\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2584 \u2584\u2588\u2588\u2588\u2593 \u2584\u2584\u2584 \u2584\u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2593 \u2588\u2588\u2593 \u2592\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2584 \u2588 \u2592\u2588\u2588\u2580 \u2580\u2588 \u2593\u2588\u2588\u2591 \u2588\u2588\u2592\u2593\u2588 \u2580 \u2588\u2588\u2592 \u2580\u2588\u2592 \u2588\u2588\u2592 \u2580\u2588\u2592 \u2592\u2588\u2588\u2588\u2588\u2584 \u2588\u2588 \u2593\u2588\u2588\u2592\u2593 \u2588\u2588\u2592 \u2593\u2592\u2592\u2588\u2588\u2592 \u2588\u2588\u2592\u2593\u2588\u2588\u2592\u2580\u2588\u2580 \u2588\u2588\u2592\u2592\u2588\u2588\u2588\u2588\u2584 \u2593 \u2588\u2588\u2592 \u2593\u2592\u2593\u2588\u2588\u2592\u2592\u2588\u2588\u2592 \u2588\u2588\u2592 \u2588\u2588 \u2580\u2588 \u2588 \u2592\u2593\u2588 \u2584 \u2592\u2588\u2588\u2580\u2580\u2588\u2588\u2591\u2592\u2588\u2588\u2588 \u2592\u2588\u2588\u2591\u2584\u2584\u2584\u2591\u2592\u2588\u2588\u2591\u2584\u2584\u2584\u2591 \u2592\u2588\u2588 \u2580\u2588\u2584 \u2593\u2588\u2588 \u2592\u2588\u2588\u2591\u2592 \u2593\u2588\u2588\u2591 \u2592\u2591\u2592\u2588\u2588\u2591 \u2588\u2588\u2592\u2593\u2588\u2588 \u2593\u2588\u2588\u2591\u2592\u2588\u2588 \u2580\u2588\u2584 \u2592 \u2593\u2588\u2588\u2591 \u2592\u2591\u2592\u2588\u2588\u2592\u2592\u2588\u2588\u2591 \u2588\u2588\u2592\u2593\u2588\u2588 \u2580\u2588 \u2588\u2588\u2592 \u2592\u2593\u2593\u2584 \u2584\u2588\u2588\u2592\u2591\u2593\u2588 \u2591\u2588\u2588 \u2592\u2593\u2588 \u2584 \u2591\u2593\u2588 \u2588\u2588\u2593\u2591\u2593\u2588 \u2588\u2588\u2593 \u2591\u2588\u2588\u2584\u2584\u2584\u2584\u2588\u2588 \u2593\u2593\u2588 \u2591\u2588\u2588\u2591\u2591 \u2593\u2588\u2588\u2593 \u2591 \u2592\u2588\u2588 \u2588\u2588\u2591\u2592\u2588\u2588 \u2592\u2588\u2588 \u2591\u2588\u2588\u2584\u2584\u2584\u2584\u2588\u2588 \u2591 \u2593\u2588\u2588\u2593 \u2591 \u2591\u2588\u2588\u2591\u2592\u2588\u2588 \u2588\u2588\u2591\u2593\u2588\u2588\u2592 \u2590\u258c\u2588\u2588\u2592 \u2592 \u2593\u2588\u2588\u2588\u2580 \u2591\u2591\u2593\u2588\u2592\u2591\u2588\u2588\u2593\u2591\u2592\u2588\u2588\u2588\u2588\u2592\u2591\u2592\u2593\u2588\u2588\u2588\u2580\u2592\u2591\u2592\u2593\u2588\u2588\u2588\u2580\u2592 \u2593\u2588 \u2593\u2588\u2588\u2592\u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2593 \u2592\u2588\u2588\u2592 \u2591 \u2591 \u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2592\u2588\u2588\u2592 \u2591\u2588\u2588\u2592 \u2593\u2588 \u2593\u2588\u2588\u2592 \u2592\u2588\u2588\u2592 \u2591 \u2591\u2588\u2588\u2591\u2591 \u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2592\u2588\u2588\u2591 \u2593\u2588\u2588\u2591 \u2591 \u2591\u2592 \u2592 \u2591 \u2592 \u2591\u2592\u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2592 \u2592\u2592 \u2591\u2591\u2591\u2592\u2591 \u2591 \u2591 \u2591 \u2591 \u2592 \u2592\u2591 \u2591 \u2591 \u2591 \u2592 \u2592\u2592 \u2591 \u2591 \u2592 \u2591\u2591 \u2591 \u2591 \u2592 \u2591 \u2591 \u2591 \u2591 \u2592 \u2592 \u2591\u2592\u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2592 \u2591\u2591\u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2592 \u2591 \u2591 \u2591 \u2592 \u2591 \u2592 \u2591\u2591 \u2591 \u2591 \u2592 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591\u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 Made with \u2764\ufe0f\ufe0f by \"\"\" + Fore . GREEN + \"\\033]8;;https://github.com/Harry-kp\\aHarry-kp\\033]8;;\\a\\n\" )","title":"Util"},{"location":"reference/cheggpy/util/#module-cheggpyutil","text":"This module contains all the utility functions used in the main module. View Source \"\"\"This module contains all the utility functions used in the main module.\"\"\" from os import system , path from time import sleep from random import randint from colorama import Fore from tqdm import trange from .custom_exceptions import MaxRetryReached def welcome_banner (): \"\"\" Display a welcome banner. \"\"\" clear_screen () print ( Fore . RED + \"\"\" \u2584\u2588\u2588\u2588\u2588\u2584 \u2588\u2588\u2591 \u2588\u2588 \u2593\u2588\u2588\u2588\u2588\u2588 \u2584\u2588\u2588\u2588\u2588 \u2584\u2588\u2588\u2588\u2588 \u2584\u2584\u2584 \u2588 \u2588\u2588 \u2584\u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2593 \u2592\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2584 \u2584\u2588\u2588\u2588\u2593 \u2584\u2584\u2584 \u2584\u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2593 \u2588\u2588\u2593 \u2592\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2584 \u2588 \u2592\u2588\u2588\u2580 \u2580\u2588 \u2593\u2588\u2588\u2591 \u2588\u2588\u2592\u2593\u2588 \u2580 \u2588\u2588\u2592 \u2580\u2588\u2592 \u2588\u2588\u2592 \u2580\u2588\u2592 \u2592\u2588\u2588\u2588\u2588\u2584 \u2588\u2588 \u2593\u2588\u2588\u2592\u2593 \u2588\u2588\u2592 \u2593\u2592\u2592\u2588\u2588\u2592 \u2588\u2588\u2592\u2593\u2588\u2588\u2592\u2580\u2588\u2580 \u2588\u2588\u2592\u2592\u2588\u2588\u2588\u2588\u2584 \u2593 \u2588\u2588\u2592 \u2593\u2592\u2593\u2588\u2588\u2592\u2592\u2588\u2588\u2592 \u2588\u2588\u2592 \u2588\u2588 \u2580\u2588 \u2588 \u2592\u2593\u2588 \u2584 \u2592\u2588\u2588\u2580\u2580\u2588\u2588\u2591\u2592\u2588\u2588\u2588 \u2592\u2588\u2588\u2591\u2584\u2584\u2584\u2591\u2592\u2588\u2588\u2591\u2584\u2584\u2584\u2591 \u2592\u2588\u2588 \u2580\u2588\u2584 \u2593\u2588\u2588 \u2592\u2588\u2588\u2591\u2592 \u2593\u2588\u2588\u2591 \u2592\u2591\u2592\u2588\u2588\u2591 \u2588\u2588\u2592\u2593\u2588\u2588 \u2593\u2588\u2588\u2591\u2592\u2588\u2588 \u2580\u2588\u2584 \u2592 \u2593\u2588\u2588\u2591 \u2592\u2591\u2592\u2588\u2588\u2592\u2592\u2588\u2588\u2591 \u2588\u2588\u2592\u2593\u2588\u2588 \u2580\u2588 \u2588\u2588\u2592 \u2592\u2593\u2593\u2584 \u2584\u2588\u2588\u2592\u2591\u2593\u2588 \u2591\u2588\u2588 \u2592\u2593\u2588 \u2584 \u2591\u2593\u2588 \u2588\u2588\u2593\u2591\u2593\u2588 \u2588\u2588\u2593 \u2591\u2588\u2588\u2584\u2584\u2584\u2584\u2588\u2588 \u2593\u2593\u2588 \u2591\u2588\u2588\u2591\u2591 \u2593\u2588\u2588\u2593 \u2591 \u2592\u2588\u2588 \u2588\u2588\u2591\u2592\u2588\u2588 \u2592\u2588\u2588 \u2591\u2588\u2588\u2584\u2584\u2584\u2584\u2588\u2588 \u2591 \u2593\u2588\u2588\u2593 \u2591 \u2591\u2588\u2588\u2591\u2592\u2588\u2588 \u2588\u2588\u2591\u2593\u2588\u2588\u2592 \u2590\u258c\u2588\u2588\u2592 \u2592 \u2593\u2588\u2588\u2588\u2580 \u2591\u2591\u2593\u2588\u2592\u2591\u2588\u2588\u2593\u2591\u2592\u2588\u2588\u2588\u2588\u2592\u2591\u2592\u2593\u2588\u2588\u2588\u2580\u2592\u2591\u2592\u2593\u2588\u2588\u2588\u2580\u2592 \u2593\u2588 \u2593\u2588\u2588\u2592\u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2593 \u2592\u2588\u2588\u2592 \u2591 \u2591 \u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2592\u2588\u2588\u2592 \u2591\u2588\u2588\u2592 \u2593\u2588 \u2593\u2588\u2588\u2592 \u2592\u2588\u2588\u2592 \u2591 \u2591\u2588\u2588\u2591\u2591 \u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2592\u2588\u2588\u2591 \u2593\u2588\u2588\u2591 \u2591 \u2591\u2592 \u2592 \u2591 \u2592 \u2591\u2592\u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2592 \u2592\u2592 \u2591\u2591\u2591\u2592\u2591 \u2591 \u2591 \u2591 \u2591 \u2592 \u2592\u2591 \u2591 \u2591 \u2591 \u2592 \u2592\u2592 \u2591 \u2591 \u2592 \u2591\u2591 \u2591 \u2591 \u2592 \u2591 \u2591 \u2591 \u2591 \u2592 \u2592 \u2591\u2592\u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2592 \u2591\u2591\u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2592 \u2591 \u2591 \u2591 \u2592 \u2591 \u2592 \u2591\u2591 \u2591 \u2591 \u2592 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591\u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 Made with \u2764\ufe0f\ufe0f by \"\"\" + Fore . GREEN + \" \\033 ]8;;https://github.com/Harry-kp \\a Harry-kp \\033 ]8;; \\a\\n \" ) def goodbye_banner (): \"\"\" Display a goodbye banner. \"\"\" print ( Fore . RED + \"\"\" | <----------[Klark in the Zodiac]----------> | \"\"\" ) print ( \"Found any bugs. Raise it here -> https://github.com/Harry-kp/cheggpy/issues\" ) def clear_screen (): \"\"\" Clear the screen. \"\"\" system ( 'clear' ) def random_long_wait ( min_time = 5 , max_time = 10 ): ''' Sleep the execution of scripts for x minutes where x is random value b/w [min_time,max_time] ''' tym = randint ( min_time , max_time ) * 60 for _ in trange ( tym , desc = 'Sleeping \ud83d\ude34' ): sleep ( 1 ) def random_wait ( min_time = 5 , max_time = 10 ) -> None : \"\"\" Wait for a random amount of time. \"\"\" tym = randint ( min_time , max_time ) for _ in trange ( tym , desc = 'Sleeping \ud83d\ude34' ): sleep ( 1 ) def play_success_notification (): \"\"\" Whenver an answerable question is found. Play the success notification sound. \"\"\" mp3_path = path . join ( path . dirname ( __file__ ), 'assets' , 'notify.mp3' ) system ( f \"afplay { mp3_path } \" ) def retry ( max_retries =- 1 , exceptions = None ): \"\"\" Decorator that retries a function call a specified number of times if it raises specific exceptions. Args: max_retries (int, optional): The maximum number of retries. Set to -1 for unlimited retries. Defaults to -1. exceptions (Exception or tuple of Exception, optional): The exception(s) to catch and retry. Defaults to None. Returns: The decorated function. Raises: MaxRetryReached: If the maximum number of retries is reached and the function still raises an exception. \"\"\" def decorator ( func ): def wrapper ( * args , ** kwargs ): retries = 0 while retries < max_retries or max_retries == - 1 : try : return func ( * args , ** kwargs ) except exceptions as err : retries += 1 print ( str ( err ), f \"Retrying { retries } ..........\" ) if retries == max_retries : raise MaxRetryReached ( 'Max retries reached. Failed to fetch the question.' ) from err random_long_wait () # This return statement is added to provide consistency return None # or raise another exception here if needed return wrapper return decorator","title":"Module cheggpy.util"},{"location":"reference/cheggpy/util/#functions","text":"","title":"Functions"},{"location":"reference/cheggpy/util/#clear_screen","text":"def clear_screen ( ) Clear the screen. View Source def clear_screen(): \"\"\" Clear the screen. \"\"\" system('clear')","title":"clear_screen"},{"location":"reference/cheggpy/util/#goodbye_banner","text":"def goodbye_banner ( ) Display a goodbye banner. View Source def goodbye_banner () : \"\"\" Display a goodbye banner. \"\"\" print ( Fore . RED + \"\"\" | <----------[Klark in the Zodiac]----------> | \"\"\" ) print ( \"Found any bugs. Raise it here -> https://github.com/Harry-kp/cheggpy/issues\" )","title":"goodbye_banner"},{"location":"reference/cheggpy/util/#play_success_notification","text":"def play_success_notification ( ) Whenver an answerable question is found. Play the success notification sound. View Source def play_success_notification(): \"\"\" Whenver an answerable question is found. Play the success notification sound. \"\"\" mp3_path = path.join(path.dirname(__file__), 'assets', 'notify.mp3') system(f\"afplay {mp3_path}\")","title":"play_success_notification"},{"location":"reference/cheggpy/util/#random_long_wait","text":"def random_long_wait ( min_time = 5 , max_time = 10 ) Sleep the execution of scripts for x minutes where x is random value b/w [min_time,max_time] View Source def random_long_wait(min_time=5, max_time=10): ''' Sleep the execution of scripts for x minutes where x is random value b/w [min_time,max_time] ''' tym = randint(min_time, max_time) * 60 for _ in trange(tym, desc='Sleeping \ud83d\ude34'): sleep(1)","title":"random_long_wait"},{"location":"reference/cheggpy/util/#random_wait","text":"def random_wait ( min_time = 5 , max_time = 10 ) -> None Wait for a random amount of time. View Source def random_wait ( min_time = 5 , max_time = 10 ) -> None : \"\"\" Wait for a random amount of time. \"\"\" tym = randint ( min_time , max_time ) for _ in trange ( tym , desc = 'Sleeping \ud83d\ude34' ) : sleep ( 1 )","title":"random_wait"},{"location":"reference/cheggpy/util/#retry","text":"def retry ( max_retries =- 1 , exceptions = None ) Decorator that retries a function call a specified number of times if it raises specific exceptions. Parameters: Name Type Description Default max_retries int The maximum number of retries. Set to -1 for unlimited retries. Defaults to -1. -1 exceptions Exception or tuple of Exception The exception(s) to catch and retry. Defaults to None. None Returns: Type Description None The decorated function. Raises: Type Description MaxRetryReached If the maximum number of retries is reached and the function still raises an exception. View Source def retry(max_retries=-1, exceptions=None): \"\"\" Decorator that retries a function call a specified number of times if it raises specific exceptions. Args: max_retries (int, optional): The maximum number of retries. Set to -1 for unlimited retries. Defaults to -1. exceptions (Exception or tuple of Exception, optional): The exception(s) to catch and retry. Defaults to None. Returns: The decorated function. Raises: MaxRetryReached: If the maximum number of retries is reached and the function still raises an exception. \"\"\" def decorator(func): def wrapper(*args, **kwargs): retries = 0 while retries < max_retries or max_retries == -1: try: return func(*args, **kwargs) except exceptions as err: retries += 1 print(str(err), f\"Retrying {retries}..........\") if retries == max_retries: raise MaxRetryReached('Max retries reached. Failed to fetch the question.') from err random_long_wait() # This return statement is added to provide consistency return None # or raise another exception here if needed return wrapper return decorator","title":"retry"},{"location":"reference/cheggpy/util/#welcome_banner","text":"def welcome_banner ( ) Display a welcome banner. View Source def welcome_banner (): \"\"\" Display a welcome banner. \"\"\" clear_screen () print ( Fore . RED + \"\"\" \u2584\u2588\u2588\u2588\u2588\u2584 \u2588\u2588\u2591 \u2588\u2588 \u2593\u2588\u2588\u2588\u2588\u2588 \u2584\u2588\u2588\u2588\u2588 \u2584\u2588\u2588\u2588\u2588 \u2584\u2584\u2584 \u2588 \u2588\u2588 \u2584\u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2593 \u2592\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2584 \u2584\u2588\u2588\u2588\u2593 \u2584\u2584\u2584 \u2584\u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2593 \u2588\u2588\u2593 \u2592\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2584 \u2588 \u2592\u2588\u2588\u2580 \u2580\u2588 \u2593\u2588\u2588\u2591 \u2588\u2588\u2592\u2593\u2588 \u2580 \u2588\u2588\u2592 \u2580\u2588\u2592 \u2588\u2588\u2592 \u2580\u2588\u2592 \u2592\u2588\u2588\u2588\u2588\u2584 \u2588\u2588 \u2593\u2588\u2588\u2592\u2593 \u2588\u2588\u2592 \u2593\u2592\u2592\u2588\u2588\u2592 \u2588\u2588\u2592\u2593\u2588\u2588\u2592\u2580\u2588\u2580 \u2588\u2588\u2592\u2592\u2588\u2588\u2588\u2588\u2584 \u2593 \u2588\u2588\u2592 \u2593\u2592\u2593\u2588\u2588\u2592\u2592\u2588\u2588\u2592 \u2588\u2588\u2592 \u2588\u2588 \u2580\u2588 \u2588 \u2592\u2593\u2588 \u2584 \u2592\u2588\u2588\u2580\u2580\u2588\u2588\u2591\u2592\u2588\u2588\u2588 \u2592\u2588\u2588\u2591\u2584\u2584\u2584\u2591\u2592\u2588\u2588\u2591\u2584\u2584\u2584\u2591 \u2592\u2588\u2588 \u2580\u2588\u2584 \u2593\u2588\u2588 \u2592\u2588\u2588\u2591\u2592 \u2593\u2588\u2588\u2591 \u2592\u2591\u2592\u2588\u2588\u2591 \u2588\u2588\u2592\u2593\u2588\u2588 \u2593\u2588\u2588\u2591\u2592\u2588\u2588 \u2580\u2588\u2584 \u2592 \u2593\u2588\u2588\u2591 \u2592\u2591\u2592\u2588\u2588\u2592\u2592\u2588\u2588\u2591 \u2588\u2588\u2592\u2593\u2588\u2588 \u2580\u2588 \u2588\u2588\u2592 \u2592\u2593\u2593\u2584 \u2584\u2588\u2588\u2592\u2591\u2593\u2588 \u2591\u2588\u2588 \u2592\u2593\u2588 \u2584 \u2591\u2593\u2588 \u2588\u2588\u2593\u2591\u2593\u2588 \u2588\u2588\u2593 \u2591\u2588\u2588\u2584\u2584\u2584\u2584\u2588\u2588 \u2593\u2593\u2588 \u2591\u2588\u2588\u2591\u2591 \u2593\u2588\u2588\u2593 \u2591 \u2592\u2588\u2588 \u2588\u2588\u2591\u2592\u2588\u2588 \u2592\u2588\u2588 \u2591\u2588\u2588\u2584\u2584\u2584\u2584\u2588\u2588 \u2591 \u2593\u2588\u2588\u2593 \u2591 \u2591\u2588\u2588\u2591\u2592\u2588\u2588 \u2588\u2588\u2591\u2593\u2588\u2588\u2592 \u2590\u258c\u2588\u2588\u2592 \u2592 \u2593\u2588\u2588\u2588\u2580 \u2591\u2591\u2593\u2588\u2592\u2591\u2588\u2588\u2593\u2591\u2592\u2588\u2588\u2588\u2588\u2592\u2591\u2592\u2593\u2588\u2588\u2588\u2580\u2592\u2591\u2592\u2593\u2588\u2588\u2588\u2580\u2592 \u2593\u2588 \u2593\u2588\u2588\u2592\u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2593 \u2592\u2588\u2588\u2592 \u2591 \u2591 \u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2592\u2588\u2588\u2592 \u2591\u2588\u2588\u2592 \u2593\u2588 \u2593\u2588\u2588\u2592 \u2592\u2588\u2588\u2592 \u2591 \u2591\u2588\u2588\u2591\u2591 \u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2592\u2588\u2588\u2591 \u2593\u2588\u2588\u2591 \u2591 \u2591\u2592 \u2592 \u2591 \u2592 \u2591\u2592\u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2592 \u2592\u2592 \u2591\u2591\u2591\u2592\u2591 \u2591 \u2591 \u2591 \u2591 \u2592 \u2592\u2591 \u2591 \u2591 \u2591 \u2592 \u2592\u2592 \u2591 \u2591 \u2592 \u2591\u2591 \u2591 \u2591 \u2592 \u2591 \u2591 \u2591 \u2591 \u2592 \u2592 \u2591\u2592\u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2592 \u2591\u2591\u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2592 \u2591 \u2591 \u2591 \u2592 \u2591 \u2592 \u2591\u2591 \u2591 \u2591 \u2592 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591\u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 \u2591 Made with \u2764\ufe0f\ufe0f by \"\"\" + Fore . GREEN + \"\\033]8;;https://github.com/Harry-kp\\aHarry-kp\\033]8;;\\a\\n\" )","title":"welcome_banner"}]}